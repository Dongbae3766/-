1. NumPy
- 핵심 용도 - 다차원 배열(ndarray) 연산과 벡터화 연산을 빠르게 처리
- 중요 포인트
- ndarray 기본 조작 (reshape, indexing, slicing)
- 브로드캐스팅(broadcasting) 규칙
- 벡터화(vectorization)로 루프 없이 연산 최적화

2. Pandas
- 핵심 용도 - 표 형태(Series·DataFrame) 데이터 로드·조작·분석
- 중요 포인트
- DataFrame 생성·조회·정렬·필터링
- 결측치 처리(dropna, fillna)
- 그룹 연산(groupby)과 집계(agg)

3. Matplotlib & Seaborn
- 핵심 용도 - 데이터 탐색용 시각화
- 중요 포인트
- Matplotlib: Figure/Axes 구조 이해, plot(), scatter(), bar()
- Seaborn: 통계적 시각화 (pairplot, heatmap, boxplot), 스타일 설정

4. Scikit-learn
- 핵심 용도 - 전통적 머신러닝 모델(분류·회귀·클러스터링)과 파이프라인
- 중요 포인트
- Estimator API (fit, predict)
- 데이터 전처리 (StandardScaler, OneHotEncoder)
- 교차검증(model_selection)과 하이퍼파라미터 튜닝(GridSearchCV)
- Pipeline으로 전처리·모델 연결

5. OpenCV
- 핵심 용도 - 이미지·비디오 읽기·전처리·변환
- 중요 포인트
- cv2.imread / cv2.imwrite
- 색상 공간 변환 (BGR↔RGB, 그레이스케일)
- 기하학적 변형(resize, rotate, warpPerspective)
- 마스크·컨투어 검출 등 기본 컴퓨터 비전 알고리즘

6. PyTorch
- 핵심 용도 - 동적 계산 그래프 기반 딥러닝 프로토타이핑
- 중요 포인트
- torch.Tensor와 autograd(자동 미분)
- nn.Module로 네트워크 정의
- DataLoader와 Dataset으로 배치 로딩
- Optimizer(Adam, SGD)와 학습 루프

7. TensorFlow & Keras
- 핵심 용도 - 정적 그래프 기반 대규모 딥러닝과 배포
- 중요 포인트
- tf.data로 고성능 데이터 파이프라인 구축
- tf.keras.Model/API로 모델 정의
- 콜백(Callback), TensorBoard 연동
- 분산 학습 전략(tf.distribute)

8. 도메인별 라이브러리
- 이미지: torchvision, Albumentations
- 데이터셋·사전학습 모델 호출, 증강(transform)
- 텍스트: Hugging Face Transformers, torchtext
- 토크나이저(tokenizer), PretrainedModel, pipeline
- 비디오: PyTorchVideo, MMAction2, OpenCV
- 프레임 추출·전처리, 3D-CNN/Transformer 기반 아키텍처
- 중요 포인트
각 라이브러리의 ‘데이터 로더’와 ‘사전학습 모델 api’ 사용법

9. 실험 관리·배포
- 도구: TensorBoard, Weights & Biases, MLflow
- 배포: ONNX, TensorFlow Serving, TorchServe
- 중요 포인트
- 학습 로그·메트릭 시각화
- 하이퍼파라미터·버전 관리
- 모델 추론 서버 구축
